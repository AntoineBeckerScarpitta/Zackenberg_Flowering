Nuuk_tot_plot$Flow_m2 <- round(Nuuk_tot_plot$TotalFlower/Nuuk_tot_plot$Plot_size, 2)
####  ZACKENBERG ####
# Salix :Need to rearrange : sum male + sum female (with 50/50 buds)
# divided Date into Year, months, days and select only Year
Zsal <- cbind(str_split_fixed(Zsal[,"Date"], '-', n=3), Zsal)
colnames(Zsal) <- c("Year", "Month", "Day", "Site", "Date", "Plot", "Section",
"Flower_var", "Value", "Species")
# sleect TOTALCOUNT, remove -9999, sum at plot level and
# select only Total Male, Female and Buds
Zsal_sel <- as.data.frame(Zsal %>%
group_by(Site, Year, Plot, Flower_var, Species) %>%
dplyr::summarise(Value=sum(Value)) %>%
ungroup() %>%
dplyr::filter(Flower_var %in% c("Total_Female", "Total_Male", "Buds"),
Value>0))
# select only Buds
buds <- Zsal_sel %>% filter(Flower_var=="Buds")
# select only total male and female
smf <- Zsal_sel %>% filter(Flower_var!="Buds")
#SexRatio for Salix Flowers
#  male / female  = x male:1 female ; 1:1 equilibrium SR
sexRatio <- smf %>%
pivot_wider(id_cols=c(Site, Year, Plot, Species),
names_from=Flower_var, values_from=Value, values_fill = 0) %>%
group_by(Plot) %>%
dplyr::summarise(sexratio=Total_Male/Total_Female) %>%
# Sal6 2019, only male, sex ratio replace with 1
replace(sapply(., is.infinite), 1) %>%
#calculate the mean sexration per plot
dplyr::summarise(MeanSR=mean(sexratio))
# Final arrangement
Zsal_tot_plot <- as.data.frame(smf %>% pivot_wider(id_cols=c(Site, Year, Plot, Species),
names_from=Flower_var, values_from=Value, values_fill = 0) %>%
# merge Buds and smf (need one row for each obs)
left_join(.,  dplyr::select(buds, Year, Plot, Value), by=c("Year", "Plot")) %>%
replace(is.na(.), 0) %>%
# merge SEXRATIO
left_join(.,  sexRatio, by="Plot") %>%
# divided following sexratio
dplyr::mutate(Total_Male_b=Total_Male + (Value*MeanSR),
Total_Female_b=Total_Female + (Value*(1-MeanSR))) %>%
dplyr::select(c(Site, Year, Species, Plot, Total_Male_b, Total_Female_b)) %>%
pivot_longer(cols=c(Total_Male_b, Total_Female_b),
names_to="Flower_var", values_to="TotalFlower") %>%
dplyr::filter(TotalFlower>0) %>% ungroup() %>%
#  created a new species level Salix_male and Salix_female
mutate(Species=ifelse(Flower_var=="Total_Male_b", "SAL_male","SAL_female")) %>%
# remove Flowe_var (which was total male, female)
dplyr::select(., -Flower_var) %>%
# merge Plot size
left_join(., Plot_size[,c('Plot_size', 'Plot')], by="Plot") %>%
# rearrange col order to rbind other species
dplyr::select(Site, Year, Species, Plot, Plot_size, TotalFlower) %>%
# calculate the flowering density
mutate(Flow_m2=round(TotalFlower/Plot_size, 2)))
# Other SPECIES at ZACK
# Rbind all ZACK datasets together except SALIX
Zack0 <- rbind(Zcas, Zdry, Zpap, Zsax, Zsil)
# merge with plot size
Zack1 <- merge(Zack0, Plot_size[,c('Plot_size', 'Plot')], by="Plot", all.x=TRUE)
# delete plot K and W at Zack
Zack <- Zack1[!Zack1$Plot %in% c('Cas5','Cas6','Dry7','Dry8',"K1C","K2C","K3C",'K4C',
"K5C","W1C","W2C","W3C",'W4C',"W5C","K3S","K4S","K5S",
"W3S","W4S","W5S", "K1S","K2S","W1S","W2S"), ]
# split Date col, to extract year, month, day in new cols
Zack <- cbind(str_split_fixed(Zack[,"Date"], '-', n=3), Zack)
colnames(Zack) <- c("Year", "Month", "Day", "Plot", "Site", "Date", "Section",
"Flower_var", "Value", "Species", "Plot_size")
# select only TotalFlowering line for the total flower per year
Zack_sub <- droplevels(Zack[Zack$Flower_var=="TotalFlowering", ])
# replace '-9999' with NA
Zack_sub[Zack_sub$Value==-9999, 'Value'] <- NA
#  delete NA in the subset
Zack_sub <- Zack_sub[complete.cases(Zack_sub),]
# Replace Section = A-D, A-B with A (will be lumped anyway)
Zack_sub[Zack_sub$Section=="A-D", "Section"] <- "A"
Zack_sub[Zack_sub$Section=="A-B", "Section"] <- "A"
# calculate the total flower per plot per year (sum of all sections)
Zack_tot_plot <- Zack_sub %>% group_by(Site, Year, Species, Plot, Plot_size) %>%
summarise(TotalFlower=sum(Value)) %>% ungroup() %>%
# devise by plot_size for density
dplyr::mutate(Flow_m2=round(TotalFlower/Plot_size, 2))
# Combined ZACKENBERG AND NUUK _ SALIX in 1 table
flow <- as.data.frame(rbind(Zack_tot_plot, Nuuk_tot_plot, Zsal_tot_plot, Nsal_tot_plot))
# data as numeric or factor
flow[,"Year"] <- as.numeric(flow[,"Year"])
flow[c("Site","Species", "Plot")] <- lapply(flow[c("Site","Species", "Plot")], as.factor)
# Remove year 1995 (installation, low trust in that survey)
flow <- flow[flow$Year>1995, ]
ls()
head(flow)
# Community level flower production
flow_com <- flow %>% group_by(Site, Year) %>%
#summarising the total site flower production and plot are per year
dplyr::summarise(ComFlow=sum(TotalFlower),
ComArea=sum(Plot_size)) %>%
ungroup() %>%
#calculate the community level density
dplyr::mutate(ComFlow_m2=ComFlow/ComArea) %>%
#### END -----------------------------------------------------------------------------
# remove temprary files
remove("Nuuk_all", "Nuuk_all_sub", "Nuuk_all0",  "Zack", "Zack_sub", "Zack0", "Zack1",
"Zcas", "Zcas0", "Zcas1", "Zdry", "Zdry0", "Zdry1", "Zpap", "Zpap0", "Zpap1",
"Zsal", "Zsal0", "Zsal_sel", "buds", "smf", "Zsal1", "Zsax", "Zsax0", "Zsax1",
"Zsil", "Zsil0", "Zsil1", "sexRatio", "Zack_tot_plot", "Nuuk_tot_plot", "Nsal_tot_plot",
"Zsal_tot_plot", "Plot_size")
warnings()
ls()
# Community level flower production
flow_com <- flow %>% group_by(Site, Year) %>%
#summarising the total site flower production and plot are per year
dplyr::summarise(ComFlow=sum(TotalFlower),
ComArea=sum(Plot_size)) %>%
ungroup() %>%
#calculate the community level density
dplyr::mutate(ComFlow_m2=ComFlow/ComArea) %>%
#### END -----------------------------------------------------------------------------
# remove temprary files
remove("buds","Nsal_tot_plot", "Nuuk_all", "Nuuk_all_sub"
"Nuuk_all0", "Nuuk_tot_plot", "Plot_size", "sexRatio"
"smf", "Zack", "Zack_sub", "Zack_tot_plot"
"Zack0", "Zack1", "Zcas", "Zcas0", "Zcas1", "Zdry"
"Zdry0", "Zdry1", "Zpap", "Zpap0", "Zpap1", "Zsal"
"Zsal_sel", "Zsal_tot_plot", "Zsal0", "Zsal1"
"Zsax", "Zsax0", "Zsax1", "Zsil", "Zsil0", "Zsil1" )
# Community level flower production
flow_com <- flow %>% group_by(Site, Year) %>%
#summarising the total site flower production and plot are per year
dplyr::summarise(ComFlow=sum(TotalFlower),
ComArea=sum(Plot_size)) %>%
ungroup() %>%
#calculate the community level density
dplyr::mutate(ComFlow_m2=ComFlow/ComArea) %>%
#### END -----------------------------------------------------------------------------
# remove temprary files
remove("buds","Nsal_tot_plot", "Nuuk_all", "Nuuk_all_sub" ,
"Nuuk_all0", "Nuuk_tot_plot", "Plot_size", "sexRatio" ,
"smf", "Zack", "Zack_sub", "Zack_tot_plot",
"Zack0", "Zack1", "Zcas", "Zcas0", "Zcas1", "Zdry" ,
"Zdry0", "Zdry1", "Zpap", "Zpap0", "Zpap1", "Zsal" ,
"Zsal_sel", "Zsal_tot_plot", "Zsal0", "Zsal1"    ,
"Zsax", "Zsax0", "Zsax1", "Zsil", "Zsil0", "Zsil1" )
ls()
rm(list=ls())
# # Load 02 - Creation database (+ scripts 00 and 01)
# source("Scripts/00_Load_libraries.r")
# source("Scripts/01_Import_DB.r")
source("Scripts/02_Creation_DB.r")
source("Scripts/C1_Load_climatic_covariates.R")
source("Scripts/C2_Build_all_snow_covariates.R")
remove("clim", "clim_year")
ls()
# remove temprary files
remove("buds","Nsal_tot_plot", "Nuuk_all", "Nuuk_all_sub" ,
"Nuuk_all0", "Nuuk_tot_plot", "Plot_size", "sexRatio" ,
"smf", "Zack", "Zack_sub", "Zack_tot_plot",
"Zack0", "Zack1", "Zcas", "Zcas0", "Zcas1", "Zdry" ,
"Zdry0", "Zdry1", "Zpap", "Zpap0", "Zpap1", "Zsal" ,
"Zsal_sel", "Zsal_tot_plot", "Zsal0", "Zsal1"    ,
"Zsax", "Zsax0", "Zsax1", "Zsil", "Zsil0", "Zsil1" )
ls()
rm(list=ls())
# # Load 02 - Creation database (+ scripts 00 and 01)
# source("Scripts/00_Load_libraries.r")
# source("Scripts/01_Import_DB.r")
source("Scripts/02_Creation_DB.r")
source("Scripts/C1_Load_climatic_covariates.R")
source("Scripts/C2_Build_all_snow_covariates.R")
remove("clim", "clim_year")
##-- DATA FOR TOMAS --##
# flow_snow_zack_TR <- flow %>%
#   dplyr::select(-trans_Flow_m2) %>%
#   dplyr::filter(Site=='Zackenberg') %>%
#   droplevels(.$Species) %>%
#   left_join(., droplevels(snow %>% filter(Site=="Zackenberg"))
#             , by=c("Year", "Plot", "Site"))
# table(flow_zack_TR$Year, flow_zack_TR$Species)
# write.csv(flow_snow_zack_TR, 'data/data_TR_pheno/flow_zack_TR.csv')
##-----------------------
# 1 - DATA MANAGMENT FOR MODEL -  ZACKENBERG ----------------------------------
# log(density) !=0 (Flow_m2[abundace==0] <- 0.001 in 02_Creation_DB, line 210)
# add snow covariate into flow
flow_snow_z <- left_join(droplevels(flow %>% filter(Site=="Zackenberg")),
droplevels(snow %>% filter(Site=="Zackenberg"))
, by=c("Year", "Plot", "Site"))
#reshape climatic data
temp_clim_z <- droplevels(clim_season_year %>% filter(Site=='High_Arctic') %>%
pivot_wider(id_cols=c(Site, Year, Season), names_from=Variable,
values_from=Value, values_fill=0) %>%
dplyr::select(!c('Humidity_%', 'Precipitation_mm')) %>%
filter(Season!="winter") %>%
pivot_wider(id_cols=c(Site, Year), names_from=Season,
values_from=Temperature_C, values_fill=0))
#rename cols
colnames(temp_clim_z) <- c('Site', 'Year', 'Temp_fall', 'Temp_summer')
#create the lag of temp of fall
temp_clim_z$lag_Temp_fall <- lag(temp_clim_z$Temp_fall, k = 1)
#Rename Site names
flow_snow_z <- flow_snow_z %>%
dplyr::mutate(Site=
dplyr::recode(Site,
"Nuuk"="Low_Arctic",
"Zackenberg"="High_Arctic"))
# FINAL DATASET:
#add clim data in flow
flow_snow_clim_z <- left_join(flow_snow_z, temp_clim_z, by=c('Site', 'Year'))
# add a lag form of trans_flow_m2
flow_snow_clim_z <- flow_snow_clim_z %>%
arrange(., Year, Plot) %>%
group_by(Plot, Species) %>%
mutate(., lag_trans_Flow_m2=lag(trans_Flow_m2, order_by = Year)) %>%
mutate(., log_flow=log1p(trans_Flow_m2),
log_lag_flow=log1p(lag_trans_Flow_m2)) %>%
dplyr::select(Site, Year,  Plot, Species, log_flow, snowmelt_DOY,
lag_Temp_fall, Temp_summer, log_lag_flow)
##----------------------------------------------------------------------------
head(flow_snow_clim_z)
# log(density) !=0 (Flow_m2[abundace==0] <- 0.001 in 02_Creation_DB, line 210)
# add snow covariate into flow
flow_snow_z <- left_join(droplevels(flow %>% filter(Site=="Zackenberg")),
droplevels(snow %>% filter(Site=="Zackenberg"))
, by=c("Year", "Plot", "Site"))
#reshape climatic data
temp_clim_z <- droplevels(clim_season_year %>% filter(Site=='High_Arctic') %>%
pivot_wider(id_cols=c(Site, Year, Season), names_from=Variable,
values_from=Value, values_fill=0) %>%
dplyr::select(!c('Humidity_%', 'Precipitation_mm')) %>%
filter(Season!="winter") %>%
pivot_wider(id_cols=c(Site, Year), names_from=Season,
values_from=Temperature_C, values_fill=0))
#rename cols
colnames(temp_clim_z) <- c('Site', 'Year', 'Temp_fall', 'Temp_summer')
#create the lag of temp of fall
temp_clim_z$lag_Temp_fall <- lag(temp_clim_z$Temp_fall, k = 1)
#Rename Site names
flow_snow_z <- flow_snow_z %>%
dplyr::mutate(Site=
dplyr::recode(Site,
"Nuuk"="Low_Arctic",
"Zackenberg"="High_Arctic"))
# FINAL DATASET:
#add clim data in flow
flow_snow_clim_z <- left_join(flow_snow_z, temp_clim_z, by=c('Site', 'Year'))
# add a lag form of flow_m2
flow_snow_clim_z <- flow_snow_clim_z %>%
arrange(., Year, Plot) %>%
group_by(Plot, Species) %>%
mutate(., lag_Flow_m2=lag(Flow_m2, order_by = Year)) %>%
mutate(., log_flow=log1p(Flow_m2),
log_lag_flow=log1p(lag_Flow_m2)) %>%
dplyr::select(Site, Year,  Plot, Species, log_flow, snowmelt_DOY,
lag_Temp_fall, Temp_summer, log_lag_flow)
head(flow_snow_clim_z)
View(flow_snow_clim_z)
names(flow_snow_clim_z)
##----------------------------------------------------------------------------
## PLOT SnowMelt DOY Zackenberg
temp_graph_z <- ggplot(flow_snow_clim_z , aes(x=Year, y=snowmelt_DOY,
group=Species,
color=Species)) +
geom_point(size=2) +
geom_smooth(method='lm', se=F) +
theme(axis.text=element_text(size=15),
axis.title=element_text(size=16,face="bold"),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
rm(list=ls())
flow_snow_clim_z <- read.csv("flow_snow_clim_z.csv")
getwd
getwed()
getwd()
write.csv2(flow_snow_clim_z, "flow_snow_clim_z.csv")
ls()
source("Scripts/02_Creation_DB.r")
source("Scripts/C1_Load_climatic_covariates.R")
source("Scripts/C2_Build_all_snow_covariates.R")
remove("clim", "clim_year")
##-- DATA FOR TOMAS --##
# flow_snow_zack_TR <- flow %>%
#   dplyr::select(-trans_Flow_m2) %>%
#   dplyr::filter(Site=='Zackenberg') %>%
#   droplevels(.$Species) %>%
#   left_join(., droplevels(snow %>% filter(Site=="Zackenberg"))
#             , by=c("Year", "Plot", "Site"))
# table(flow_zack_TR$Year, flow_zack_TR$Species)
# write.csv(flow_snow_zack_TR, 'data/data_TR_pheno/flow_zack_TR.csv')
##-----------------------
# 1 - DATA MANAGMENT FOR MODEL -  ZACKENBERG ----------------------------------
# log(density) !=0 (Flow_m2[abundace==0] <- 0.001 in 02_Creation_DB, line 210)
# add snow covariate into flow
flow_snow_z <- left_join(droplevels(flow %>% filter(Site=="Zackenberg")),
droplevels(snow %>% filter(Site=="Zackenberg"))
, by=c("Year", "Plot", "Site"))
#reshape climatic data
temp_clim_z <- droplevels(clim_season_year %>% filter(Site=='High_Arctic') %>%
pivot_wider(id_cols=c(Site, Year, Season), names_from=Variable,
values_from=Value, values_fill=0) %>%
dplyr::select(!c('Humidity_%', 'Precipitation_mm')) %>%
filter(Season!="winter") %>%
pivot_wider(id_cols=c(Site, Year), names_from=Season,
values_from=Temperature_C, values_fill=0))
#rename cols
colnames(temp_clim_z) <- c('Site', 'Year', 'Temp_fall', 'Temp_summer')
#create the lag of temp of fall
temp_clim_z$lag_Temp_fall <- lag(temp_clim_z$Temp_fall, k = 1)
#Rename Site names
flow_snow_z <- flow_snow_z %>%
dplyr::mutate(Site=
dplyr::recode(Site,
"Nuuk"="Low_Arctic",
"Zackenberg"="High_Arctic"))
# FINAL DATASET:
#add clim data in flow
flow_snow_clim_z <- left_join(flow_snow_z, temp_clim_z, by=c('Site', 'Year'))
# add a lag form of flow_m2
flow_snow_clim_z <- flow_snow_clim_z %>%
arrange(., Year, Plot) %>%
group_by(Plot, Species) %>%
mutate(., lag_Flow_m2=lag(Flow_m2, order_by = Year)) %>%
mutate(., log_flow=log1p(Flow_m2),
log_lag_flow=log1p(lag_Flow_m2)) %>%
dplyr::select(Site, Year,  Plot, Species, log_flow, snowmelt_DOY,
lag_Temp_fall, Temp_summer, log_lag_flow)
write.csv2(flow_snow_clim_z, "Guillaume/V2/flow_snow_clim_z.csv")
##----------------------------------------------------------------------------
## PLOT SnowMelt DOY Zackenberg
temp_graph_z <- ggplot(flow_snow_clim_z , aes(x=Year, y=snowmelt_DOY,
group=Species,
color=Species)) +
geom_point(size=2) +
geom_smooth(method='lm', se=F) +
theme(axis.text=element_text(size=15),
axis.title=element_text(size=16,face="bold"),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
rm(list=ls())
# # Load 02 - Creation database (+ scripts 00 and 01)
# source("Scripts/00_Load_libraries.r")
# source("Scripts/01_Import_DB.r")
source("Scripts/02_Creation_DB.r")
source("Scripts/C1_Load_climatic_covariates.R")
source("Scripts/C2_Build_all_snow_covariates.R")
remove("clim", "clim_year")
# 1 - DATA MANAGMENT FOR MODEL -  NUUK ----------------------------------
# log(density) !=0 (Flow_m2[abundace==0] <- 0.001 in 02_Creation_DB, line 210)
# will be replace by NA later for full mod
# add snow covariate into flow _ NO DATA FOR NUUK YET
flow_snow_n <- left_join(droplevels(flow %>% filter(Site=="Nuuk")),
droplevels(snow %>% filter(Site=="Nuuk")),
by=c("Year", "Plot", "Site"))
#reshape climatic data
temp_clim_n <- droplevels(clim_season_year %>% filter(Site=='Low_Arctic') %>%
pivot_wider(id_cols=c(Site, Year, Season),
names_from=Variable,
values_from=Value,
values_fill=0) %>%
dplyr::select(!c('Humidity_%', 'Precipitation_mm')) %>%
filter(Season!="winter") %>%
pivot_wider(id_cols=c(Site, Year),
names_from=Season,
values_from=Temperature_C,
values_fill=0))
#rename cols
colnames(temp_clim_n) <- c('Site', 'Year', 'Temp_fall', 'Temp_summer')
#create the lag of temp of fall
temp_clim_n$lag_Temp_fall <- lag(temp_clim_n$Temp_fall, k = 1)
#Rename Site names
flow_snow_n <- flow_snow_n %>%
dplyr::mutate(Site=
dplyr::recode(Site,
"Nuuk"="Low_Arctic",
"Zackenberg"="High_Arctic"))
# FINAL DATASET:
#add clim data in flow
flow_snow_clim_n <- left_join(flow_snow_n, temp_clim_n,
by=c('Site', 'Year'))
# add a lag form of trans_flow_m2
flow_snow_clim_n <- flow_snow_clim_n %>%
arrange(., Year, Plot) %>%
group_by(Plot, Species) %>%
mutate(., lag_Flow_m2=lag(Flow_m2, order_by = Year)) %>%
mutate(., log_flow=log1p(trans_Flow_m2),
log_lag_flow=log1p(lag_Flow_m2)) %>%
dplyr::select(Site, Year,  Plot, Species, log_flow, snowmelt_DOY,
lag_Temp_fall, Temp_summer, log_lag_flow)
#-----------------------------------------------------------------------------=
# add a lag form of trans_flow_m2
flow_snow_clim_n <- flow_snow_clim_n %>%
arrange(., Year, Plot) %>%
group_by(Plot, Species) %>%
mutate(., lag_Flow_m2=lag(Flow_m2, order_by = Year)) %>%
mutate(., log_flow=log1p(Flow_m2),
log_lag_flow=log1p(lag_Flow_m2)) %>%
dplyr::select(Site, Year,  Plot, Species, log_flow, snowmelt_DOY,
lag_Temp_fall, Temp_summer, log_lag_flow)
write.csv2(flow_snow_clim_n, "Guillaume/V2/flow_snow_clim_n.csv")
ls()
##############################################################################
#
#                           Greenland Flowering project
#                                 Guillaume script
#
##############################################################################
# Antoine Becker-Scarpitta & Guillaume Blanchet
# June 2022
# NOTE:
# Dans cette version de modél, la forme 'lag' est en fait la densité de lannée
# précédente. Pour la calculwe jai donc fait:
# lag_Flow_m2=lag(Flow_m2, order_by = Year)
# Si on veut faire une forme plus formelle type autoregressive, jimagine
# que les données qui doivent être utilisé sont les données 'brutes': log_flow
# CLean space
rm(list=ls())
# lib
library(sjPlot)
library(lme4)
#------------------------------------------------
#SUMMARY
# 1 - load and rund mod for the high Arctic (Zackenberg)
# 2 - load and rund mod for the low Arctic (Nuuk)
# 3 - Table model output
# 4 - Graphs Forest plot + Species level
#------------------------------------------------
# 1 - HIGH ARCTIC - Zackenberg
# load data
flow_snow_clim_z <- read.csv("Guillaume/V2/flow_snow_clim_z.csv",
stringsAsFactors=FALSE, header=TRUE,  sep=";",
dec=',', strip.white = T,na.strings = c("","NA"))
# Reorganise data
datZ <- flow_snow_clim_z
# Scale explanatory variable except for lag log_flow
datZ$snowmelt_DOY <- scale(datZ$snowmelt_DOY)
datZ$Temp_summer <- scale(datZ$Temp_summer)
datZ$lag_Temp_fall <- scale(datZ$lag_Temp_fall)
#  MODEL EQ3 - Interaction model
mod_full_z_cross_int <- lmer(log_flow ~  0 +
Species : Temp_summer +
Species : lag_Temp_fall +
Species : snowmelt_DOY +
Species : log_lag_flow + #forme autoregressive
(1|Plot) + (1|Plot:Year),
data=datZ,
REML=TRUE,
na.action=na.omit)
#------------------------------------------------
# 2 - LOW ARCTIC - Nuuk
# load data
flow_snow_clim_n <- read.csv("Guillaume/V2/flow_snow_clim_n.csv",
stringsAsFactors=FALSE, header=TRUE,  sep=";",
dec=',', strip.white = T,na.strings = c("","NA"))
# Reorganise data a little
datN <- flow_snow_clim_n
# Scale explanatory variable except for lag log_flow
datN$snowmelt_DOY <- scale(datN$snowmelt_DOY)
datN$Temp_summer <- scale(datN$Temp_summer)
datN$lag_Temp_fall <- scale(datN$lag_Temp_fall)
#  MODEL EQ3 -  Only interactions
mod_full_n_cross_int <- lmer(log_flow ~   0 +
Species : Temp_summer +
Species : lag_Temp_fall +
Species : snowmelt_DOY +
Species : log_lag_flow + #forme autoregressive
(1|Plot) + (1|Plot:Year),
data=datN,
REML=T,
na.action=na.omit)
#------------------------------------------------
# 3 - Table model output
# full mod Zack + Nuuk
tab_model(mod_full_z_cross_int, mod_full_n_cross_int,
p.val = "kr",
show.df = TRUE,
dv.labels = c("Full int Zack", "Full int Nuuk"))
#------------------------------------------------
# 4 - Graphs Forest plot
# FOREST PLOT
# High Arctic Zackenberg
FP_zackInt <- sjPlot::plot_model(mod_full_z_cross_int,
type = "est",
show.values=T,
show.intercept = FALSE,
show.p = TRUE,
vline.color="grey",
value.offset=-0.3,
title = "Forest plot Zackenberg sans 0") +
theme(axis.text=element_text(size=10),
axis.title=element_text(size=10, face="bold"),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
strip.background = element_blank(),
strip.text = element_text(face = "bold", color="black"))
# Low Arctic - Nuuk
FP_NuukInt <- sjPlot::plot_model(mod_full_n_cross_int,
type = "est",
show.values=T,
show.intercept = FALSE,
show.p = TRUE,
vline.color="grey",
value.offset=-0.3,
title = "Forest plot Nuuk - sans 0") +
theme(axis.text=element_text(size=10),
axis.title=element_text(size=10, face="bold"),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
strip.background = element_blank(),
strip.text = element_text(face = "bold", color="black"))
#panel
gridExtra::grid.arrange(FP_zackInt, FP_NuukInt, ncol=2)
